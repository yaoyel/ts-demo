{"version":3,"file":"app.js","sourceRoot":"","sources":["../../src/app.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,4BAA0B;AAC1B,6DAA+F;AAC/F,mCAAiC;AACjC,qCAAsF;AACtF,iEAA4D;AAC5D,iCAAkC;AAClC,iEAA4D;AAC5D,uCAAuC;AAEvC,kCAAgB,CAAC,kBAAS,CAAC,CAAC;AAC5B,sBAAe,CAAC,kBAAS,CAAC,CAAC;AAC3B,0BAAgB,CAAC;IACb,MAAM,EAAC;QACP,IAAI,EAAC,OAAO;QACZ,IAAI,EAAC,MAAM,CAAC,GAAG,CAAC,YAAY,CAAC;QAC7B,IAAI,EAAC,MAAM,CAAC,GAAG,CAAC,YAAY,CAAC;QAC7B,QAAQ,EAAC,MAAM,CAAC,GAAG,CAAC,gBAAgB,CAAC;QACrC,QAAQ,EAAC,MAAM,CAAC,GAAG,CAAC,gBAAgB,CAAC;QACrC,QAAQ,EAAC,MAAM,CAAC,GAAG,CAAC,gBAAgB,CAAC;KACpC;IACF,8BAA8B;IAC7B,cAAc,EAAE,IAAI;IACpB,QAAQ,EAAC,CAAC,eAAe,CAAC;CAE7B,CAAC,CAAC,IAAI,CAAC,CAAM,OAAO;IACnB,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;AACzB,CAAC,CAAA,CAAC,CAAC;AAIH,MAAM,MAAM,GAAG,qCAAe,CAAC;IAC3B,kBAAkB,EAAC,CAAM,MAAa,EAAC,KAAU;QAC7C,MAAM,KAAK,GAAC,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC;QAEpD,EAAE,CAAA,CAAC,CAAC,KAAK,CAAC;YAAC,MAAM,CAAC,IAAI,CAAC;QAEvB,IAAI,WAAW,GAAC,MAAM,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QAC1C,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC;IAE5B,CAAC,CAAA;IACD,oBAAoB,EAAC,CAAO,MAAa,EAAC,KAAc;QACpD,MAAM,KAAK,GAAG,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC;QAEtD,EAAE,CAAA,CAAC,CAAC,KAAK,CAAC;YACN,MAAM,CAAC,KAAK,CAAC;QAEjB,MAAM,CAAC,MAAM,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,OAAI,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAA,MAAM,CAAC,IAAI,CAAC,CAAA,CAAC,CAAC;aACpE,KAAK,CAAC,CAAC,CAAC,OAAI,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,CAAA,CAAA,CAAC,CAAC,CAAC;IACpD,CAAC,CAAA;IAED,WAAW,EAAE;QACT,+BAAc;QACd,+BAAc;KACjB;CACJ,CAAC,CAAC;AAGH;;GAEG;AACH,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;AAEpB,OAAO,CAAC,GAAG,CAAC,uCAAuC,CAAC,CAAC","sourcesContent":["import \"reflect-metadata\";\nimport {createKoaServer, useContainer as routingContainer, Action,} from \"routing-controllers\";\nimport {Container} from \"typedi\";\nimport {createConnection, useContainer as ormUseContainer, Connection} from \"typeorm\";\nimport {UserController} from \"./controllers/UserController\";\nimport  * as config from \"config\";\nimport {AuthController} from \"./controllers/AuthController\";\nimport * as Utils from \"./utils/Utils\";\n\nroutingContainer(Container);\normUseContainer(Container);\ncreateConnection({\n    driver:{\n    type:\"mysql\",\n    host:config.get(\"Mysql.host\"),\n    port:config.get(\"Mysql.port\"),\n    database:config.get(\"Mysql.database\"),\n    username:config.get(\"Mysql.username\"),\n    password:config.get(\"Mysql.password\")\n    },\n   // logger: [\"query\", \"error\"],\n    autoSchemaSync: true,\n    entities:[\"./entity/*.ts\"]\n\n}).then(async connect=>{\n  console.log(\"connect\");\n});\n\n\n\nconst koaApp = createKoaServer({\n    currentUserChecker:async(action:Action,value?:any)=>{\n        const token=action.request.headers[\"authorization\"];\n\n        if(!token) return null;\n\n        var decodeToken=await Utils.verify(token);\n        return decodeToken.data;\n\n    },\n    authorizationChecker:async (action:Action,roles:string[]):Promise<boolean>=> {\n        const token = action.request.headers[\"authorization\"];\n\n        if(!token)\n            return false;\n\n        return await Utils.verify(token).then((v)=>{console.log(v);return true;})\n            .catch((e)=>{console.log(e); return false});\n    },\n\n    controllers: [\n        UserController,\n        AuthController\n    ]\n});\n\n\n/**\n * Start the koa app.\n */\nkoaApp.listen(3000);\n\nconsole.log(\"Server is up and running at port 3000\");"]}